service: cb-library-01
frameworkVersion: '2'
useDotenv: true
variablesResolutionMode: 20210326
plugins:
  - serverless-certificate-creator
  - serverless-domain-manager
  - serverless-cloudfront-plugin
  - serverless-offline
  - serverless-plugin-resource-tagging
  - serverless-webpack
  
  
provider:
  architecture: arm64
  name: aws
  region: ${env:AWS_DEFAULT_REGION}
  stage: ${opt:stage, 'local'}
  runtime: nodejs14.x
  memorySize: 128
  timeout: 30
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221
  environment:
    APP_ENV: ${opt:stage, 'local'}
    DYNAMODB_ENDPOINT: 'http://dynamodb:8000'
    DYNAMODB_LIBRARY_TABLE: 'Cb-Library-01-${self:provider.stage}'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_LIBRARY_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_LIBRARY_TABLE}/index/*
  stackTags:
    Project: "${self:service}"
    Environment: "${opt:stage, 'local'}"
    
  
  

functions:
  app:
    handler: app/app.handler
    
    events:
      - http: 
          path: /
          method: ANY
          cors: true
          
      - http: 
          path: /{proxy+}
          method: ANY
          cors: true
          

resources:
  Conditions:
    CreateDashboard:
      Fn::Equals:
        - ${self:provider.stage}
        - prod
  Resources:
    CbLibrary01Table:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_LIBRARY_TABLE}
        AttributeDefinitions:
          - AttributeName: Category
            AttributeType: S
          - AttributeName: BookID
            AttributeType: S
          - AttributeName: Title
            AttributeType: S
        KeySchema:
          - AttributeName: Category
            KeyType: HASH
          - AttributeName: BookID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: CategoryIndex
            KeySchema:
              - AttributeName: Category
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: BookIndex
            KeySchema:
              - AttributeName: BookID
                KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - Title
                - Author
                - Category
          - IndexName: TitleCategoryIndex
            KeySchema:
              - AttributeName: Title
                KeyType: HASH
              - AttributeName: Category
                KeyType: RANGE
            Projection:
             ProjectionType: KEYS_ONLY

custom:
  
  basePath:
    stage: 'stage'
    prod: ''
    local: ''
  customCertificate:
    certificateName: '*.example-api.it'
    hostedZoneNames: example-api.it.
    rewriteRecords: false
    region: ${self:provider.region}

  customDomain:
    domainName: cb-library-01.example-api.it
    endpointType: 'regional'
    stage: ${self:provider.stage}
    certificateName: '*.example-api.it'
    createRoute53Record: true
    autoDomain: true
    apiType: rest
    basePath: ${self:custom.basePath.${opt:stage, 'local'}}

  serverless-offline:
    host: 0.0.0.0

  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true
    packager: 'yarn'
    excludeFiles: app/**/*.test.js